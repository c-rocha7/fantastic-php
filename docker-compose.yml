# Definição dos serviços (contêineres)
services:

  # Serviço: Nginx (Servidor Web)
  nginx:
    image: nginx:stable-alpine
    container_name: nginx_server
    ports:
      - "80:80"
    volumes:
      - ./src:/var/www/html
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - php
      - db
      - postgres # Adicionada dependência do PostgreSQL
    deploy:
      resources:
        limits:
          cpus: '0.25' # Limita a, no máximo, 25% de um núcleo de CPU
          memory: 128M # Limita a, no máximo, 128 Megabytes de RAM
  # Serviço: PHP-FPM (Processador PHP)
  php:
    build: ./php
    container_name: php_fpm_processor
    volumes:
      - ./src:/var/www/html
    depends_on:
      - redis
      - db
      - postgres # Adicionada dependência do PostgreSQL
    deploy:
      resources:
        limits:
          cpus: '0.50' # Limita a, no máximo, 50% de um núcleo de CPU
          memory: 256M # Limita a, no máximo, 256 Megabytes de RAM

  # Serviço: Banco de Dados MySQL
  db:
    image: mysql:8.0
    container_name: mysql_db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 'root_password'
      MYSQL_DATABASE: 'meu_banco_mysql'
      MYSQL_USER: 'user_mysql'
      MYSQL_PASSWORD: 'user_password_mysql'
    ports:
      - "3306:3306"
    volumes:
      - db-data:/var/lib/mysql
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M # Bancos de dados podem usar mais memória
        reservations:
          memory: 256M # Garante que o MySQL sempre tenha 256M disponíveis

  # Serviço: Banco de Dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_DB: 'meu_banco_pg'
      POSTGRES_USER: 'user_pg'
      POSTGRES_PASSWORD: 'user_password_pg'
    ports:
      # Expõe a porta 5432 do contêiner na porta 5432 da sua máquina
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          memory: 256M

  # Serviço: Adminer (Interface Web para Bancos de Dados)
  adminer:
    image: adminer
    container_name: adminer_ui
    restart: always
    ports:
      # Expõe a porta 8080 do contêiner na porta 8080 da sua máquina
      - "8080:8080"
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

  # Serviço: Redis
  redis:
    image: redis:alpine
    container_name: redis_cache
    restart: always
    volumes:
      # Persiste os dados do Redis em um volume nomeado
      - redis-data:/data
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          memory: 128M

  # Serviço: Redis Commander (Interface Web para Redis)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis_commander_ui
    restart: always
    ports:
      # Expõe a porta 8081 do contêiner na porta 8082 da sua máquina
      - "8082:8081"
    environment:
      # Informa ao Redis Commander como se conectar ao nosso serviço Redis
      # O formato é 'alias:hostname:porta'
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

# Definição dos volumes nomeados
volumes:
  db-data:
  postgres-data: # <-- Novo volume para persistir os dados do PostgreSQL
  redis-data:
